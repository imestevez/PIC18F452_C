;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 02/05/2018 10:35:47
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF46  	GOTO        140
_interrupt:
;p10c.c,6 :: 		void interrupt(){
0x0008	0xF015C000  	MOVFF       R0, 21
;p10c.c,7 :: 		if(INTCON.INT0IF){   //SW1
0x000C	0xA2F2      	BTFSS       INTCON, 1 
0x000E	0xD00D      	BRA         L_interrupt0
;p10c.c,8 :: 		if(periodo>0)periodo--;
0x0010	0x0E00      	MOVLW       0
0x0012	0x6E00      	MOVWF       R0 
0x0014	0x5017      	MOVF        _periodo+1, 0 
0x0016	0x5C00      	SUBWF       R0, 0 
0x0018	0xE102      	BNZ         L__interrupt21
0x001A	0x5016      	MOVF        _periodo, 0 
0x001C	0x0800      	SUBLW       0
L__interrupt21:
0x001E	0xE204      	BC          L_interrupt1
0x0020	0x0E01      	MOVLW       1
0x0022	0x5E16      	SUBWF       _periodo, 1 
0x0024	0x0E00      	MOVLW       0
0x0026	0x5A17      	SUBWFB      _periodo+1, 1 
L_interrupt1:
;p10c.c,9 :: 		INTCON.INT0IF = 0;
0x0028	0x92F2      	BCF         INTCON, 1 
;p10c.c,10 :: 		}
L_interrupt0:
;p10c.c,11 :: 		if(INTCON3.INT1IF){   //SW2
0x002A	0xA0F0      	BTFSS       INTCON3, 0 
0x002C	0xD003      	BRA         L_interrupt2
;p10c.c,12 :: 		periodo++;
0x002E	0x4A16      	INFSNZ      _periodo, 1 
0x0030	0x2A17      	INCF        _periodo+1, 1 
;p10c.c,13 :: 		INTCON3.INT1IF = 0;
0x0032	0x90F0      	BCF         INTCON3, 0 
;p10c.c,14 :: 		}
L_interrupt2:
;p10c.c,15 :: 		}
L_end_interrupt:
L__interrupt20:
0x0034	0xF000C015  	MOVFF       21, R0
0x0038	0x0011      	RETFIE      1
; end of _interrupt
_SPI1_Init:
;__Lib_SPI_c345.c,23 :: 		
;__Lib_SPI_c345.c,24 :: 		
0x003A	0x0EFF      	MOVLW       _SPI1_Read
0x003C	0x6E21      	MOVWF       _SPI_Rd_Ptr 
0x003E	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x0040	0x6E22      	MOVWF       _SPI_Rd_Ptr+1 
0x0042	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x0044	0x6E23      	MOVWF       _SPI_Rd_Ptr+2 
0x0046	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x0048	0x6E24      	MOVWF       _SPI_Rd_Ptr+3 
;__Lib_SPI_c345.c,25 :: 		
0x004A	0x0E6A      	MOVLW       _SPI1_Write
0x004C	0x6E1D      	MOVWF       _SPI_Wr_Ptr 
0x004E	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x0050	0x6E1E      	MOVWF       _SPI_Wr_Ptr+1 
0x0052	0x0E25      	MOVLW       FARG_SPI1_Write_data_
0x0054	0x6E1F      	MOVWF       _SPI_Wr_Ptr+2 
0x0056	0x0E00      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x0058	0x6E20      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_c345.c,27 :: 		
0x005A	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345.c,28 :: 		
0x005C	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;__Lib_SPI_c345.c,29 :: 		
0x005E	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345.c,31 :: 		
0x0060	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_c345.c,32 :: 		
0x0062	0x0E40      	MOVLW       64
0x0064	0x6EC7      	MOVWF       SSPSTAT 
;__Lib_SPI_c345.c,33 :: 		
0x0066	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_c345.c,35 :: 		
L_end_SPI1_Init:
0x0068	0x0012      	RETURN      0
; end of _SPI1_Init
_SPI1_Write:
;__Lib_SPI_c345.c,78 :: 		
;__Lib_SPI_c345.c,81 :: 		
0x006A	0xFFC9C025  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,82 :: 		
L_SPI1_Write8:
0x006E	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0070	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345.c,83 :: 		
0x0072	0x0000      	NOP
0x0074	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,84 :: 		
0x0076	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,86 :: 		
L_end_SPI1_Write:
0x007A	0x0012      	RETURN      0
; end of _SPI1_Write
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x007C	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x007E	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0082	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0084	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0086	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0088	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x008A	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x008C	0x6A16      	CLRF        _periodo 
0x008E	0x6A17      	CLRF        23 
0x0090	0x6A18      	CLRF        _i 
0x0092	0x6A19      	CLRF        25 
0x0094	0x6A1A      	CLRF        _valor 
0x0096	0x0E30      	MOVLW       48
0x0098	0x6E1B      	MOVWF       27 
0x009A	0x6A1C      	CLRF        _direccion 
;p10c.c,16 :: 		void main() {
;p10c.c,17 :: 		TRISC = 0;
0x009C	0x6A94      	CLRF        TRISC 
;p10c.c,18 :: 		TRISB = 3;//RB0 Y RB1 entradas
0x009E	0x0E03      	MOVLW       3
0x00A0	0x6E93      	MOVWF       TRISB 
;p10c.c,19 :: 		PORTC = 1;
0x00A2	0x0E01      	MOVLW       1
0x00A4	0x6E82      	MOVWF       PORTC 
;p10c.c,20 :: 		SPI1_Init();
0x00A6	0xDFC9      	RCALL       _SPI1_Init
;p10c.c,22 :: 		ADCON1 = 0x07; //E/S digitales
0x00A8	0x0E07      	MOVLW       7
0x00AA	0x6EC1      	MOVWF       ADCON1 
;p10c.c,25 :: 		INTCON.INT0IF = 0; // Flag a 0
0x00AC	0x92F2      	BCF         INTCON, 1 
;p10c.c,26 :: 		INTCON.INT0IE = 1; // se habilitan interrupciones INT0
0x00AE	0x88F2      	BSF         INTCON, 4 
;p10c.c,27 :: 		INTCON2.INTEDG0 = 1; // Flanco de subida
0x00B0	0x8CF1      	BSF         INTCON2, 6 
;p10c.c,29 :: 		INTCON3.INT1IF = 0; // Flag a 0
0x00B2	0x90F0      	BCF         INTCON3, 0 
;p10c.c,30 :: 		INTCON3.INT1IE = 1; // se habilitan interrupciones INT1
0x00B4	0x86F0      	BSF         INTCON3, 3 
;p10c.c,31 :: 		INTCON2.INTEDG1 = 1; // Flanco de subida
0x00B6	0x8AF1      	BSF         INTCON2, 5 
;p10c.c,33 :: 		INTCON2.RBPU = 0; //Resistencias de pullup
0x00B8	0x9EF1      	BCF         INTCON2, 7 
;p10c.c,34 :: 		INTCON.GIE = 1; //Interrupciones en general
0x00BA	0x8EF2      	BSF         INTCON, 7 
;p10c.c,36 :: 		while(1){
L_main3:
;p10c.c,37 :: 		PORTC.B0 = 0;
0x00BC	0x9082      	BCF         PORTC, 0 
;p10c.c,38 :: 		if(direccion == 0){ //incrementa
0x00BE	0x501C      	MOVF        _direccion, 0 
0x00C0	0x0A00      	XORLW       0
0x00C2	0xE122      	BNZ         L_main5
;p10c.c,39 :: 		SPI1_Write(valor>>8);
0x00C4	0xF000C01B  	MOVFF       _valor+1, R0
0x00C8	0x6A01      	CLRF        R1 
0x00CA	0xF025C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x00CE	0xDFCD      	RCALL       _SPI1_Write
;p10c.c,40 :: 		SPI1_Write(valor);
0x00D0	0xF025C01A  	MOVFF       _valor, FARG_SPI1_Write_data_
0x00D4	0xDFCA      	RCALL       _SPI1_Write
;p10c.c,41 :: 		PORTC.B0 = 1;
0x00D6	0x8082      	BSF         PORTC, 0 
;p10c.c,42 :: 		delay_us(6);
0x00D8	0x0E03      	MOVLW       3
0x00DA	0x6E0D      	MOVWF       R13, 0
L_main6:
0x00DC	0x2E0D      	DECFSZ      R13, 1, 0
0x00DE	0xD7FE      	BRA         L_main6
0x00E0	0x0000      	NOP
0x00E2	0x0000      	NOP
;p10c.c,43 :: 		valor++;
0x00E4	0x4A1A      	INFSNZ      _valor, 1 
0x00E6	0x2A1B      	INCF        _valor+1, 1 
;p10c.c,44 :: 		for(i = 0; i<= periodo; i++)delay_us(10);
0x00E8	0x6A18      	CLRF        _i 
0x00EA	0x6A19      	CLRF        _i+1 
L_main7:
0x00EC	0x5019      	MOVF        _i+1, 0 
0x00EE	0x5C17      	SUBWF       _periodo+1, 0 
0x00F0	0xE102      	BNZ         L__main23
0x00F2	0x5018      	MOVF        _i, 0 
0x00F4	0x5C16      	SUBWF       _periodo, 0 
L__main23:
0x00F6	0xE308      	BNC         L_main8
0x00F8	0x0E06      	MOVLW       6
0x00FA	0x6E0D      	MOVWF       R13, 0
L_main10:
0x00FC	0x2E0D      	DECFSZ      R13, 1, 0
0x00FE	0xD7FE      	BRA         L_main10
0x0100	0x0000      	NOP
0x0102	0x4A18      	INFSNZ      _i, 1 
0x0104	0x2A19      	INCF        _i+1, 1 
0x0106	0xD7F2      	BRA         L_main7
L_main8:
;p10c.c,45 :: 		}
L_main5:
;p10c.c,46 :: 		if(direccion == 1){ //decrementa
0x0108	0x501C      	MOVF        _direccion, 0 
0x010A	0x0A01      	XORLW       1
0x010C	0xE124      	BNZ         L_main11
;p10c.c,47 :: 		SPI1_Write(valor>>8);
0x010E	0xF000C01B  	MOVFF       _valor+1, R0
0x0112	0x6A01      	CLRF        R1 
0x0114	0xF025C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0118	0xDFA8      	RCALL       _SPI1_Write
;p10c.c,48 :: 		SPI1_Write(valor);
0x011A	0xF025C01A  	MOVFF       _valor, FARG_SPI1_Write_data_
0x011E	0xDFA5      	RCALL       _SPI1_Write
;p10c.c,49 :: 		PORTC.B0 = 1;
0x0120	0x8082      	BSF         PORTC, 0 
;p10c.c,50 :: 		delay_us(6);
0x0122	0x0E03      	MOVLW       3
0x0124	0x6E0D      	MOVWF       R13, 0
L_main12:
0x0126	0x2E0D      	DECFSZ      R13, 1, 0
0x0128	0xD7FE      	BRA         L_main12
0x012A	0x0000      	NOP
0x012C	0x0000      	NOP
;p10c.c,51 :: 		valor--;
0x012E	0x0E01      	MOVLW       1
0x0130	0x5E1A      	SUBWF       _valor, 1 
0x0132	0x0E00      	MOVLW       0
0x0134	0x5A1B      	SUBWFB      _valor+1, 1 
;p10c.c,52 :: 		for(i = 0; i<= periodo; i++)delay_us(10);
0x0136	0x6A18      	CLRF        _i 
0x0138	0x6A19      	CLRF        _i+1 
L_main13:
0x013A	0x5019      	MOVF        _i+1, 0 
0x013C	0x5C17      	SUBWF       _periodo+1, 0 
0x013E	0xE102      	BNZ         L__main24
0x0140	0x5018      	MOVF        _i, 0 
0x0142	0x5C16      	SUBWF       _periodo, 0 
L__main24:
0x0144	0xE308      	BNC         L_main14
0x0146	0x0E06      	MOVLW       6
0x0148	0x6E0D      	MOVWF       R13, 0
L_main16:
0x014A	0x2E0D      	DECFSZ      R13, 1, 0
0x014C	0xD7FE      	BRA         L_main16
0x014E	0x0000      	NOP
0x0150	0x4A18      	INFSNZ      _i, 1 
0x0152	0x2A19      	INCF        _i+1, 1 
0x0154	0xD7F2      	BRA         L_main13
L_main14:
;p10c.c,53 :: 		}
L_main11:
;p10c.c,54 :: 		if(valor == 0x3FFF) direccion = 1;  //si llega al nivel maximo, se indica que decremente
0x0156	0x501B      	MOVF        _valor+1, 0 
0x0158	0x0A3F      	XORLW       63
0x015A	0xE102      	BNZ         L__main25
0x015C	0x0EFF      	MOVLW       255
0x015E	0x181A      	XORWF       _valor, 0 
L__main25:
0x0160	0xE102      	BNZ         L_main17
0x0162	0x0E01      	MOVLW       1
0x0164	0x6E1C      	MOVWF       _direccion 
L_main17:
;p10c.c,55 :: 		if(valor == 0x3000) direccion = 0; //si llega al nivel mínimo, se indica que incremente
0x0166	0x501B      	MOVF        _valor+1, 0 
0x0168	0x0A30      	XORLW       48
0x016A	0xE102      	BNZ         L__main26
0x016C	0x0E00      	MOVLW       0
0x016E	0x181A      	XORWF       _valor, 0 
L__main26:
0x0170	0xB4D8      	BTFSC       STATUS, 2 
0x0172	0x6A1C      	CLRF        _direccion 
L_main18:
;p10c.c,58 :: 		}
0x0174	0xD7A3      	BRA         L_main3
;p10c.c,60 :: 		}
L_end_main:
0x0176	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [50]    _interrupt
0x003A      [48]    _SPI1_Init
0x006A      [18]    _SPI1_Write
0x007C      [16]    ___CC2DW
0x008C     [236]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [2]    frexp_pom_L0
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [2]    _periodo
0x0018       [2]    _i
0x001A       [2]    _valor
0x001C       [1]    _direccion
0x001D       [4]    _SPI_Wr_Ptr
0x0021       [4]    _SPI_Rd_Ptr
0x0025       [1]    FARG_SPI1_Write_data_
0x0F82       [1]    PORTC
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC3_bit
0x0FC1       [1]    ADCON1
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
